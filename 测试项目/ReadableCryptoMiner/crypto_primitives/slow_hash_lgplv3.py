#!/usr/bin/env python 
__author__ = "Patrik Lundin / Thomas Eder"
__copyright__ = "Copyright 2018, nothisispatrik.com" 
__license__ = "LGPL v3. Algorithms/constants may be (C) 2014-2018 The Monero project or (C) 2012-2014 The Cryptonote Developers. All code is original"
__email__ = "patrik@nothisispatrik.com / thomas@gaudia-tech.com"
__status__ = "Prototype"
__doc__ = """

   This is a Python implementation of the cryptonight slow hash. It includes a
   short run_tests() with an example call. It is based on (and was checked against)
   the original Monero Project code (https://github.com/monero-project/monero)
   with and without the 2018 April hard fork variant. 
   
   First version was written for Python 2.7 by Patrik Lundin,
   port to Python 3.6 + several tweaks were brought by Thomas Eder

   The cryptonight algorithm remains extremely slow,
   around 0.03 hashes per second on a regular i5 CPU.
   As such, it's meant more as a consise summary
   of the algorithm than usefully runnable code. It's not particularly
   optimized, and where possible prior optimization has been removed. 

   There are no outside dependencies (except "time" which is only used 
   in the example) with everything reimplemented in pure python, including 
   AES, Keccak, Blake, Groestl, JH, and Skein. 
   """


from functools import reduce


    # Single AES round, no round key (can be xor:ed in after)

    # Here implemented using TBoxes, which is relativily fast, but
    # vulnerable to cache-timing attacks. Not safe for other purposes.
def round(b): 
    def col(c1, c2, c3, c4):
        t = S1[c1] ^ S2[c2] ^ S3[c3] ^ S4[c4]
        t1 = t >> 0 & 255
        t2 = t >> 8 & 255
        t3 = t >> 16 & 255
        t4 = t >> 24 & 255
        return (
         t1, t2, t3, t4)

    b = col(b[0], b[5], b[10], b[15]) + col(b[4], b[9], b[14], b[3]) + col(b[8], b[13], b[2], b[7]) + col(b[12], b[1], b[6], b[11])
    return b

    # AES key expansion.

    # Specific to CN:s ten rounds. Presumes that round keys follow
    # rc(n+1) = rc(n)<<1, which isn't true generally.
def kexp(k):
    xk = [
     0] * 160
    xk[:32] = k[:32]
    cs = 32
    rc = 1
    while cs < 160:
        t = xk[cs - 4:cs]
        if cs % 32 == 0:
            t = [
             SBox[t[1]] ^ rc, SBox[t[2]], SBox[t[3]], SBox[t[0]]]
            rc *= 2
        else:
            if cs % 32 == 16:
                t = [
                 SBox[t[0]], SBox[t[1]], SBox[t[2]], SBox[t[3]]]
        xk[cs:(cs + 4)] = [
         xk[cs - 32 + 0] ^ t[0],
         xk[cs - 32 + 1] ^ t[1],
         xk[cs - 32 + 2] ^ t[2],
         xk[cs - 32 + 3] ^ t[3]]
        cs += 4

    return xk

    # expand result from initial Keccac into a 2Mb scratchad by
    # repeatedly 10 round AES:ing a chunk of data.
def asplode(kec):
    xkey = kexp(kec[:32])
    st = kec[64:192]
    xk = [ xkey[i:i + 16] for i in range(0, len(xkey), 16) ]
    pad = []
    while len(pad) < 2097152:
        for j in range(0, len(st), 16):
            t = st[j:j + 16]
            for i in range(10):
                t = round(t)
                t = [ a ^ b for a, b in zip(t, xk[i]) ]
            pad.extend(t)
        st = pad[-128:]
    return pad

    # combine final scratchpad into a single block again by xoring and
    # then 10 round AESing the blocks over each other one at a time
def implode(pad,kec):
    xkey = kexp(kec[32:64])
    xk = [ xkey[i:i + 16] for i in range(0, len(xkey), 16) ]
    st = kec[64:192]
    for p in range(0,len(pad),128):
        for i in range(128):
            st[i] ^= pad[p+i]
        for i in range(0,128,16):
            for r in range(10):
                st[i:i+16] = round(st[i:i+16])
                for j in range(16):
                    st[i+j] ^= xk[r][j]

    kec[64:192] = st
    return kec

    # Do the memhard loop. Starting two blocks, read another from scratch pad
    # do an AES round on it, xor it by some things, write it back. Then use 
    # a value from that to read another block, do two 64 bit mul:s and two
    # 64 bit adds, some more xors, and write that back. Start over and do it
    # again 1<<19 times.
def memhrd(pad, kec, variant=0, tw=[0]*8):

        # convert a series of bytes into two 64 bit words and multiply them
        # return as 8 bytes
    def mul(a, b):
        t1 = a[0] << 0 | a[1] << 8 | a[2] << 16 | a[3] << 24 | a[4] << 32 | a[5] << 40 | a[6] << 48 | a[7] << 56
        t2 = b[0] << 0 | b[1] << 8 | b[2] << 16 | b[3] << 24 | b[4] << 32 | b[5] << 40 | b[6] << 48 | b[7] << 56
        r = t1 * t2
        r1 = r >> 64
        r2 = r & 0xffffffffffffffff
        return [ r1&255, (r1>>8)&255, (r1>>16)&255, (r1>>24)&255, (r1>>32)&255, (r1>>40)&255, (r1>>48)&255, (r1>>56)&255, r2&0xff, (r2>>8)&255, (r2>>16)&255,(r2>>24)&255,  (r2>>32)&255, (r2>>40)&255, (r2>>48)&255, (r2>>56)&255 ]

        # Convert two blocks into four 64 bit numbers and pairwise add them,
        # no overflow. Swap order and convert back into bytes
    def sumhlf(a, b):
        ta1 = a[0] << 0 | a[1] << 8 | a[2] << 16 | a[3] << 24 | a[4] << 32 | a[5] << 40 | a[6] << 48 | a[7] << 56
        ta2 = a[8] << 0 | a[9] << 8 | a[10] << 16 | a[11] << 24 | a[12] << 32 | a[13] << 40 | a[14] << 48 | a[15] << 56
        tb1 = b[0] << 0 | b[1] << 8 | b[2] << 16 | b[3] << 24 | b[4] << 32 | b[5] << 40 | b[6] << 48 | b[7] << 56
        tb2 = b[8] << 0 | b[9] << 8 | b[10] << 16 | b[11] << 24 | b[12] << 32 | b[13] << 40 | b[14] << 48 | b[15] << 56
        r1,r2 = (ta1 + tb1 & 18446744073709551615, ta2 + tb2 & 18446744073709551615)
        return [ r1&255, (r1>>8)&255, (r1>>16)&255, (r1>>24)&255, (r1>>32)&255, (r1>>40)&255, (r1>>48)&255, (r1>>56)&255, r2&0xff, (r2>>8)&255, (r2>>16)&255,(r2>>24)&255,  (r2>>32)&255, (r2>>40)&255, (r2>>48)&255, (r2>>56)&255 ]

        # xor two blocks
    def blxor(a, b):
        return [ t1 ^ t2 for t1, t2 in zip(a, b) ]

        # pull 17 bits from a block for use as an address in the scratchpad.
        # Zeroes out the 4 LSB rather than dividing, making it useful as an
        # index in the pad directly. >>4 instead of &.. would give a block
        # index, which could then later be <<4 to give an actual location.
    def toaddr(a):
        return (a[2] << 16 | a[1] << 8 | a[0]) & 2097136

        # make the first two indexes
    A = blxor(kec[0:16], kec[32:48])
    B = blxor(kec[16:32], kec[48:64])

    for i in range(1<<19):
        t = toaddr(A)
        C = pad[t:t + 16]
        C = round(C)
        C = blxor(C, A)
        pad[t:(t + 16)] = blxor(B, C)

            # After the Apr 2018 hardfork, this will be/was
            # added to the loop. This is equivalent to VARIANT1_1
            # in the original C. 
        if variant:
            a = pad[t+11]
            a = (~a&1)<<4 | ((~a&1)<<4 & a)<<1 | (a&32)>>1
            pad[t+11] ^= a

        B = C
        t = toaddr(C)
        C = pad[t:t + 16]

        P = mul(B, C)
        A = sumhlf(A, P)
        pad[t:(t + 16)] = A
            # this is the second variant add in, equivalent of VARIENT1_2 in
            # C. 
        if variant:
            for i in range(8):
                pad[t+i+8] ^= tw[i]
        A = blxor(A, C)

    return pad

    # Calculate 1600 bit keccak hash from a 200b input. 
    # This isn't equivalent to the final SHA3 version.
    # I don't remember how exactly, but don't expect it to be.
def keccak(inp):
    def rol(b,n):
        return ((b<<n) & 0xffffffffffffffff) | (b>>(64-n))

    s = [sum(a[i]<<(i<<3) for i in range(8)) for a in [inp[i:i+8] for i in range(0,200,8)]]

    xo = [ 0x0000000000000001, 0x0000000000008082, 0x800000000000808a,
        0x8000000080008000, 0x000000000000808b, 0x0000000080000001,
        0x8000000080008081, 0x8000000000008009, 0x000000000000008a,
        0x0000000000000088, 0x0000000080008009, 0x000000008000000a,
        0x000000008000808b, 0x800000000000008b, 0x8000000000008089,
        0x8000000000008003, 0x8000000000008002, 0x8000000000000080, 
        0x000000000000800a, 0x800000008000000a, 0x8000000080008081,
        0x8000000000008080, 0x0000000080000001, 0x8000000080008008 ]

    ro = [ 1,  3,  6,  10, 15, 21, 28, 36, 45, 55, 2,  14, 
           27, 41, 56, 8,  25, 43, 62, 18, 39, 61, 20, 44 ]

    pn = [ 10, 7,  11, 17, 18, 3, 5,  16, 8,  21, 24, 4, 
           15, 23, 19, 13, 12, 2, 20, 14, 22, 9,  6,  1 ]

    for r in range(24):
        b0 = s[0]^s[5]^s[10]^s[15]^s[20]
        b1 = s[1]^s[6]^s[11]^s[16]^s[21]
        b2 = s[2]^s[7]^s[12]^s[17]^s[22]
        b3 = s[3]^s[8]^s[13]^s[18]^s[23]
        b4 = s[4]^s[9]^s[14]^s[19]^s[24]

        t = b4 ^ rol(b1,1)
        s[0] ^=t ; s[5] ^=t ; s[10] ^=t ; s[15] ^=t ; s[20] ^=t
        t = b0 ^ rol(b2,1)
        s[1] ^=t ; s[6] ^=t ; s[11] ^=t ; s[16] ^=t ; s[21] ^=t
        t = b1 ^ rol(b3,1)
        s[2] ^=t ; s[7] ^=t ; s[12] ^=t ; s[17] ^=t ; s[22] ^=t
        t = b2 ^ rol(b4,1)
        s[3] ^=t ; s[8] ^=t ; s[13] ^=t ; s[18] ^=t ; s[23] ^=t
        t = b3 ^ rol(b0,1)
        s[4] ^=t ; s[9] ^=t ; s[14] ^=t ; s[19] ^=t ; s[24] ^=t

        t = s[1]
        for i in range(24):
            j = pn[i]
            t2 = s[j]
            s[j] = rol(t, ro[i])
            t = t2

        for j in range(0,24,5):
            b0 = s[j    ];
            b1 = s[j + 1];
            b2 = s[j + 2];
            b3 = s[j + 3];
            b4 = s[j + 4];
            s[j    ] ^= (b1^0xffffffffffffffff) & b2;
            s[j + 1] ^= (b2^0xffffffffffffffff) & b3;
            s[j + 2] ^= (b3^0xffffffffffffffff) & b4;
            s[j + 3] ^= (b4^0xffffffffffffffff) & b0;
            s[j + 4] ^= (b0^0xffffffffffffffff) & b1;

        s[0] ^= xo[r]

    b = reduce(lambda a,b:a+b,[[((a>>(c<<3))&255) for c in range(8)] for a in s])
    return b

    # Blake hash. Assumes 200b input, produces 32b output

def blake(data):
    K=[0x243F6A88,0x85A308D3,0x13198A2E,0x03707344,0xA4093822,0x299F31D0,0x082EFA98,0xEC4E6C89,0x452821E6,0x38D01377,0xBE5466CF,0x34E90C6C,0xC0AC29B7,0xC97C50DD,0x3F84D5B5,0xB5470917]
    h=[0x6A09E667,0xBB67AE85,0x3C6EF372,0xA54FF53A,0x510E527F,0x9B05688C,0x1F83D9AB,0x5BE0CD19]
    S = blakeS # Constant from bottom of file
    data = data+[0x80] + [0x00]*46 + [0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x40]
    for (o,t) in [(0,512), (64,1024), (128,1536), (192,1600)]:
        m = [ ((data[o+i+0]<<24))|
               ((data[o+i+1]<<16))|
               ((data[o+i+2]<<8))|
               ((data[o+i+3]<<0)) for i in range(0,64,4)]
        v = [0]*16
        v[ 0: 8] = [h[i] for i in range(8)]
        v[ 8:16] = [K[i] for i in range(8)]
        v[ 8:12] = [v[8+i] for i in range(4)]
        v[12] = v[12] ^ t
        v[13] = v[13] ^ t

        ror = lambda x,n: (x >> n) | ((x << (32-n)) & 0xFFFFFFFF)
        for round in range(14):
            i = 0
            for (a, b, c, d) in [
                ( 0, 4, 8,12), ( 1, 5, 9,13), ( 2, 6,10,14),
                ( 3, 7,11,15), ( 0, 5,10,15), ( 1, 6,11,12),
                ( 2, 7, 8,13), ( 3, 4, 9,14) ]:
                p,q  = S[round][i], S[round][i+1]
                i += 2
                    
                v[a] = ((v[a] + v[b]) + (m[p] ^ K[q]) ) & 0xFFFFFFFF
                v[d] = ror( v[d] ^ v[a], 16)
                v[c] = (v[c] + v[d]) & 0xFFFFFFFF
                v[b] = ror( v[b] ^ v[c], 12)
                
                v[a] = ((v[a] + v[b]) + (m[q] ^ K[p]) ) & 0xFFFFFFFF
                v[d] = ror( v[d] ^ v[a], 8)
                v[c] = (v[c] + v[d]) & 0xFFFFFFFF
                v[b] = ror( v[b] ^ v[c], 7)
                
        h = [h[i]^v[i]^v[i+8] for i in range(8)]
    rv = reduce(lambda a,b:a+b,[[(h[i]>>24)&255, (h[i]>>16)&255, (h[i]>>8)&255, (h[i]>>0)&255] for i in range(8)])
    return rv
    
    # Groestl hash. Assumes 200b input, produces 32b output
def groestl(inp):
    def col(x,y,i,c0,c1,c2,c3,c4,c5,c6,c7):
        T = groestlT # Constant from bottom of file
        y[i] = T[0*256+((x[c0]>>0 )&255)] ^ T[1*256+((x[c1]>>8 )&255)] ^ T[2*256+((x[c2]>>16)&255)] ^ T[3*256+((x[c3]>>24)&255)] ^ T[4*256+((x[c4]>>0 )&255)] ^ T[5*256+((x[c5]>>8 )&255)] ^ T[6*256+((x[c6]>>16)&255)] ^ T[7*256+((x[c7]>>24)&255)]

    def P(x,y,r):
        x[ 0] ^= 0x00000000^r
        x[ 2] ^= 0x00000010^r
        x[ 4] ^= 0x00000020^r
        x[ 6] ^= 0x00000030^r
        x[ 8] ^= 0x00000040^r
        x[10] ^= 0x00000050^r
        x[12] ^= 0x00000060^r
        x[14] ^= 0x00000070^r
        col(x,y, 0,  0,  2,  4,  6,  9, 11, 13, 15)
        col(x,y, 1,  9, 11, 13, 15,  0,  2,  4,  6)
        col(x,y, 2,  2,  4,  6,  8, 11, 13, 15,  1)
        col(x,y, 3, 11, 13, 15,  1,  2,  4,  6,  8)
        col(x,y, 4,  4,  6,  8, 10, 13, 15,  1,  3)
        col(x,y, 5, 13, 15,  1,  3,  4,  6,  8, 10)
        col(x,y, 6,  6,  8, 10, 12, 15,  1,  3,  5)
        col(x,y, 7, 15,  1,  3,  5,  6,  8, 10, 12)
        col(x,y, 8,  8, 10, 12, 14,  1,  3,  5,  7)
        col(x,y, 9,  1,  3,  5,  7,  8, 10, 12, 14)
        col(x,y,10, 10, 12, 14,  0,  3,  5,  7,  9)
        col(x,y,11,  3,  5,  7,  9, 10, 12, 14,  0)
        col(x,y,12, 12, 14,  0,  2,  5,  7,  9, 11)
        col(x,y,13,  5,  7,  9, 11, 12, 14,  0,  2)
        col(x,y,14, 14,  0,  2,  4,  7,  9, 11, 13)
        col(x,y,15,  7,  9, 11, 13, 14,  0,  2,  4)
      
    def Q(x,y,r):
        x[ 0] = x[ 0] ^ 0xffffffff
        x[ 1] ^= 0xffffffff^r
        x[ 2] = x[ 2] ^ 0xffffffff
        x[ 3] ^= 0xefffffff^r
        x[ 4] = x[ 4] ^ 0xffffffff
        x[ 5] ^= 0xdfffffff^r
        x[ 6] = x[ 6] ^ 0xffffffff
        x[ 7] ^= 0xcfffffff^r
        x[ 8] = x[ 8] ^ 0xffffffff
        x[ 9] ^= 0xbfffffff^r
        x[10] = x[10] ^ 0xffffffff
        x[11] ^= 0xafffffff^r
        x[12] = x[12] ^ 0xffffffff
        x[13] ^= 0x9fffffff^r
        x[14] = x[14] ^ 0xffffffff
        x[15] ^= 0x8fffffff^r
        col(x,y, 0,  2,  6, 10, 14,  1,  5,  9, 13)
        col(x,y, 1,  1,  5,  9, 13,  2,  6, 10, 14)
        col(x,y, 2,  4,  8, 12,  0,  3,  7, 11, 15)
        col(x,y, 3,  3,  7, 11, 15,  4,  8, 12,  0)
        col(x,y, 4,  6, 10, 14,  2,  5,  9, 13,  1)
        col(x,y, 5,  5,  9, 13,  1,  6, 10, 14,  2)
        col(x,y, 6,  8, 12,  0,  4,  7, 11, 15,  3)
        col(x,y, 7,  7, 11, 15,  3,  8, 12,  0,  4)
        col(x,y, 8, 10, 14,  2,  6,  9, 13,  1,  5)
        col(x,y, 9,  9, 13,  1,  5, 10, 14,  2,  6)
        col(x,y,10, 12,  0,  4,  8, 11, 15,  3,  7)
        col(x,y,11, 11, 15,  3,  7, 12,  0,  4,  8)
        col(x,y,12, 14,  2,  6, 10, 13,  1,  5,  9)
        col(x,y,13, 13,  1,  5,  9, 14,  2,  6, 10)
        col(x,y,14,  0,  4,  8, 12, 15,  3,  7, 11)
        col(x,y,15, 15,  3,  7, 11,  0,  4,  8, 12)

    def F(h,m):
        Ptmp = [0]*16;
        Qtmp = [0]*16;
        y = [0]*16;
        z = [0]*16;

        for i in range(16):
            z[i] = m[i]
            Ptmp[i] = h[i]^m[i]

        Q(z, y, 0x00000000)
        Q(y, z, 0x01000000)
        Q(z, y, 0x02000000)
        Q(y, z, 0x03000000)
        Q(z, y, 0x04000000)
        Q(y, z, 0x05000000)
        Q(z, y, 0x06000000)
        Q(y, z, 0x07000000)
        Q(z, y, 0x08000000)
        Q(y, Qtmp, 0x09000000)

        P(Ptmp, y, 0x00000000)
        P(y, z, 0x00000001)
        P(z, y, 0x00000002)
        P(y, z, 0x00000003)
        P(z, y, 0x00000004)
        P(y, z, 0x00000005)
        P(z, y, 0x00000006)
        P(y, z, 0x00000007)
        P(z, y, 0x00000008)
        P(y, Ptmp, 0x00000009)

        for i in range(16):
            h[i] ^= Ptmp[i]^Qtmp[i]

    buf = [0]*16
    tmp = [0]*16
    y = [0]*16
    z = [0]*16
    d = [0]*16

    d[15] = 0x00010000
    data = [
        (inp[i+3]<<24)| (inp[i+2]<<16)| (inp[i+1]<<8)| (inp[i+0]<<0) 
        for i in range(0,len(inp),4) ] + [0x80] + [0]*12 + [4<<24]

    F(d,data[0:16])
    F(d,data[16:32])
    F(d,data[32:48])
    F(d,data[48:64])

    tmp = d[:16]
    P(tmp, y, 0x00000000)
    P(y, z, 0x00000001)
    P(z, y, 0x00000002)
    P(y, z, 0x00000003)
    P(z, y, 0x00000004)
    P(y, z, 0x00000005)
    P(z, y, 0x00000006)
    P(y, z, 0x00000007)
    P(z, y, 0x00000008)
    P(y, tmp, 0x00000009)

    rv = [d[j] ^ tmp[j] for j in range(8,16)]
    rv = reduce(lambda a,b:a+b,[[a&255,(a>>8)&255, (a>>16)&255, (a>>24)&255] for a in rv])
    return rv

    # JH hash, Assumes 200b input, produces 32b output
def jh(data):
    hashval = [32]
    A = [0]*256
    rc = [0]*64
    rcx = [0]*256
    tmp = [0]*256
    S = [[9,0,4,11,13,12,3,15,1,10,2,6,7,5,8,14],[3,12,6,13,5,7,1,9,15,2,0,4,11,10,14,8]] 
    rc0 = [0x6,0xa,0x0,0x9,0xe,0x6,0x6,0x7,0xf,0x3,0xb,0xc,0xc,0x9,0x0,0x8,0xb,0x2,0xf,0xb,0x1,0x3,0x6,0x6,0xe,0xa,0x9,0x5,0x7,0xd,0x3,0xe,0x3,0xa,0xd,0xe,0xc,0x1,0x7,0x5,0x1,0x2,0x7,0x7,0x5,0x0,0x9,0x9,0xd,0xa,0x2,0xf,0x5,0x9,0x0,0xb,0x0,0x6,0x6,0x7,0x3,0x2,0x2,0xa]
    d = [254,0,64,128,255,254] 

    H = [1]+[0]*127

    for b in d:
        if b<=128:
            for i in range(64):
                H[i] ^= data[b+i]
        elif b==255:
            H[:8] = [H[i]^data[192+i] for i in range(8)]
            H[8] ^= 128
        rc = rc0[:]

        for i in range(256):
            t0 = (H[i>>3] >> (7 - (i & 7)) ) & 1
            t1 = (H[(i+256)>>3] >> (7 - (i & 7)) ) & 1
            t2 = (H[(i+512 )>>3] >> (7 - (i & 7)) ) & 1
            t3 = (H[(i+768 )>>3] >> (7 - (i & 7)) ) & 1
            tmp[i] = (t0 << 3) | (t1 << 2) | (t2 << 1) | (t3 << 0)
        for i in range(128):
            A[i << 1] = tmp[i]
            A[(i << 1)+1] = tmp[i+128]

        for r in range(42):
            for i in range(256):
                rcx[i] = (rc[i >> 2] >> (3 - (i & 3)) ) & 1
            for i in range(256):
                tmp[i] = S[rcx[i]][A[i]]
            for i in range(0,256,2):
                t0 = tmp[i+1]^(((tmp[i]<<1)^(tmp[i]>>3)^((tmp[i]>>2)&2))&0xf)
                t1 = tmp[i+0]^(((t0<<1)^(t0>>3)^((t0>>2)&2))&0xf)
                t2 = (i>>1)&1
                tmp[i+t2^1] = t0
                tmp[i+t2] = t1
            for i in range(128):
                A[i] = tmp[i<<1] 
                A[(i+128)^1] = tmp[(i<<1)+1] 
            for i in range(64):
                tmp[i] = S[0][rc[i]]
            for i in range(0,64,2):
                tmp[i+1] ^= ((tmp[i]<<1)^(tmp[i]>>3)^((tmp[i]>>2)&2))&0xf
                tmp[i] ^= ((tmp[i+1]<<1)^(tmp[i+1]>>3)^((tmp[i+1]>>2)&2))&0xf
            for i in range(0,64,4):
                t = tmp[i+2]
                tmp[i+2] = tmp[i+3]
                tmp[i+3] = t
            for i in range(32):
                rc[i] = tmp[i<<1]  
                rc[(i+32)^1] = tmp[(i<<1)+1]

        for i in range(128):
            tmp[i] = A[i << 1]
            tmp[i+128] = A[(i << 1)+1]
        for i in range(128):
            H[i] = 0
        for i in range(256):
            t0 = (tmp[i] >> 3) & 1
            t1 = (tmp[i] >> 2) & 1
            t2 = (tmp[i] >> 1) & 1
            t3 = (tmp[i] >> 0) & 1
            H[i>>3] |= t0 << (7 - (i & 7))
            H[(i + 256)>>3] |= t1 << (7 - (i & 7))
            H[(i + 512)>>3] |= t2 << (7 - (i & 7))
            H[(i + 768)>>3] |= t3 << (7 - (i & 7))

        if b<=128:
            for i in range(64):
                H[i+64] ^= data[b+i]
        elif(b==255):
            for i in range(8):
                H[64+i] ^= data[192+i]
            H[8+64] ^= 128
            H[63] ^= 64
            H[62] ^= 6 
    H[127] ^= 64
    H[126] ^= 6
    return H[96:]

    # Skein hash. Assumes 200b input, produces 32b output
def skein(data):
    def M(x): # Mask down to 64 bin
        return x & 0xffffffffffffffff
    def R64(x, p, n): # Rotate left, 64 bit
        x[p] = M((x[p] << n) | (x[p] >> (64-n)))
    def Add(x, a, b): # 64 bit add, no overflow
        x[a] = M(x[a]+x[b])

    def R512(X,p0,p1,p2,p3,p4,p5,p6,p7,q):
        Rk = [ [46, 36, 19, 37], [33, 27, 14, 42], [17, 49, 36, 39], [44,  9, 54, 56], [39, 30, 34, 24], [13, 50, 10, 17], [25, 29, 39, 43], [ 8, 35, 56, 22]]
        
        Add(X,p0,p1)
        R64(X,p1,Rk[q][0])
        X[p1] ^= X[p0] 

        Add(X,p2,p3)
        R64(X,p3,Rk[q][1])
        X[p3] ^= X[p2]

        Add(X,p4,p5)
        R64(X,p5,Rk[q][2])
        X[p5] ^= X[p4]

        Add(X,p6,p7)
        R64(X,p7,Rk[q][3])
        X[p7] ^= X[p6] 

        # Skein types and lengths. Since it's just five blocks, always
        # same length and such, they're constant. Here as TYPE | LEN,
        # as it is stored in Skeins T(2)
    LC = [ 0x7000000000000040, 0x3000000000000080, 0x30000000000000c0,
        0xb0000000000000c8, 0xff00000000000008 ]
        # Init vector. Specific to 512-256 hash
    L = [ 0,0,0, 0xCCD044A12FDB3E13, 0xE83590301A79A9EB,
          0x55AEA0614F816E6F, 0x2A2767A4AE9B94DB, 0xEC06025E74DD7683,
          0xE7A436CDC4746251, 0xC36FBAF9393AD185, 0x3EEDBA1833EDFC13, 0]
        # Keeper of data. Extra length so that after the 200b we send,
        # there's enough zeros for another full block, and, for the
        # OUT+FINAL block, one with all zeros. 
    b = [0]*35
        # Offset to current data. Hops around
    w = 0
        # Temp state data
    X = [0]*8;
        # fill b up with 8b words
    for i in range(25):
        b[i] = ( 
            (data[(i*8)+0]<<0)|
            (data[(i*8)+1]<<8)|
            (data[(i*8)+2]<<16)|
            (data[(i*8)+3]<<24)|
            (data[(i*8)+4]<<32)|
            (data[(i*8)+5]<<40)|
            (data[(i*8)+6]<<48)|
            (data[(i*8)+7]<<56))
        # Each block..
    for i in range(5): 
            # T2 = T1^T0, like we stored
        L[2] = LC[i]
            # T0 = length. Extract with &0xff
        L[0] = L[2]&255; 
            # T2 = type+flags. Exract by removing T0
        L[1] = L[2]^L[0];
            # Parity + magic constant.
        L[11] = L[3]^L[4]^L[5]^L[6]^L[7]^L[8]^L[9]^L[10]^0x1BD11BDAA9FC1A22;
            # Next chunk
        w = ((i&3)<<3)+25*(i>>2);
            # Init X
        for R in range(8):
            X[R]= M(b[w+R] + L[R+3])
        X[5]=M(X[5]+L[0])
        X[6]=M(X[6]+L[1])

            # Rounds
        for R in range(0,18,2):
            R512(X,0,1,2,3,4,5,6,7,0)
            R512(X,2,1,4,7,6,5,0,3,1)
            R512(X,4,1,6,3,0,5,2,7,2)
            R512(X,6,1,0,7,2,5,4,3,3)
            for j in range(8):
                X[j] = M(X[j]+L[3+((R+j+1)%9)])
            X[5] = M(X[5]+L[(R+1)%3])
            X[6] = M(X[6]+L[(R+2)%3])
            X[7] = M(X[7]+R+1)
            R512(X,0,1,2,3,4,5,6,7,4)
            R512(X,2,1,4,7,6,5,0,3,5)
            R512(X,4,1,6,3,0,5,2,7,6)
            R512(X,6,1,0,7,2,5,4,3,7)
            for j in range(8):
                X[j] = M(X[j]+L[3+((R+j+2)%9)])
            X[5] = M(X[5]+L[(R+2)%3])
            X[6] = M(X[6]+L[(R+3)%3])
            X[7] = M(X[7]+R+2)

            # Back into state w/ round results
        for R in range(8):
            L[3+R] = X[R] ^ b[w+R] 

        # Done, convert to bytes and shove into h
    h = []
    for i in range(4):
        h.extend( [
            (L[i+3]>>0)&255,
            (L[i+3]>>8)&255,
            (L[i+3]>>16)&255,
            (L[i+3]>>24)&255,
            (L[i+3]>>32)&255,
            (L[i+3]>>40)&255,
            (L[i+3]>>48)&255,
            (L[i+3]>>56)&255] )

    return h

    # All of the preceeding hash functions are de-generalized to presume
    # input length and to only produce specific output length. The will not
    # function correctly under other circumstances.
   

    # The main cryptonight hash function. Takes 76 bytes input (without
    # verifying that) and outputs the final 32 byte hash. Both input
    # and output are arrays of 8 bit integers. If "quiet" is set False,
    # it'll print what it's doing through off and on the steps. If
    # "variant" is set to 1, it'll work as it's supposed to after the
    # Apr 2018 hard fork, otherwise as it's supposed to before.
def cn_slow_hash(inp,quiet=0,variant=0):
    tw = [0]*8 
    if(not quiet):
        print("Keccac..")
        # Padding
    inp = inp + [0x01] + [0x00]*58 + [0x80] + [0x00]*64
    kec = keccak(inp)

        # Equivalent to VARIANT*INIT* in C. Stores the last 8 bytes after
        # keccak xor the current Nonce, which will later be xored in thoughout
        # the memhard loop (in the equivalent of VARIANT1_2).
    if variant:
        tw = [a^b for (a,b) in zip(kec[192:],inp[35:35+8])]

    if(not quiet):
        print("Expanding scratchpad..")
    pad = asplode(kec)
    if(not quiet):
        print("Memhard..")
    memhrd(pad, kec, variant, tw)
    if(not quiet):
        print("Imploding..")
    imp = implode(pad, kec)
    if(not quiet):
        print("Keccac again..")
    kec = keccak(imp)

    h = kec[0]&3
    if h==0:
        if(not quiet):
            print("Blake..")
        r = blake(kec)
    elif h==1:
        if(not quiet):
            print("Groestl..")
        r = groestl(kec)
    elif h==2:
        if(not quiet):
            print("Jh..")
        r = jh(kec)
    else:
        if(not quiet):
            print("Skein..")
        r = skein(kec)

    return r


def slow_hash_glue_func(output_buffer, inp_data_intli_form, input_len):
    tmp_res = cn_slow_hash(inp_data_intli_form, quiet=1, variant=1)
    for k in range(len(output_buffer)):  # regular copy
        output_buffer[k] = tmp_res[k]


import time # only used in main

    # run_tests(). This runs a single case and checks it against one of two
    # precalculated results depending on "variant". This isn't particularly
    # sufficient for testing it, but it's at least a single runnable example

def run_tests():
    inp = [
        0x05, 0x05, 0x84, 0xe2, 0xfa, 0xcc, 0x05, 0xfe, 
        0x5c, 0x31, 0x96, 0xe9, 0x95, 0xae, 0x88, 0x31, 
        0x0b, 0xa8, 0x6e, 0xae, 0x4a, 0xb6, 0x25, 0xab, 
        0xd2, 0x6e, 0x19, 0x2f, 0x26, 0xf3, 0x2c, 0x7d, 
        
        0xcb, 0x6d, 0xb1, 0xd1, 0x08, 0xd7, 0x68, 0x5d, 
        0x00, 0x08, 0x57, 0xd6, 0x62, 0xea, 0x60, 0x02, 
        0xe5, 0x19, 0xa2, 0x76, 0xb9, 0xd6, 0x9a, 0xb9,
        0xf0, 0xdf, 0x14, 0xc9, 0xf5, 0x86, 0xe1, 0x1a,

        0xe4, 0x57, 0xb1, 0xb5, 0x74, 0x05, 0xaf, 0xbf, 
        0x9c, 0xc0, 0xcb, 0x06 ]

    st = time.time()
    variant = 1 # change to run other version

    r = cn_slow_hash(inp, False, variant)

    et = time.time()

    print(' '.join("%.2x"%(a) for a in r))
    print("Total %ds (%f H/s)"%(et-st, 1./(et-st)))
    correct_result_old = [0x2a,0x26,0x47,0x75,0x7c,0xf6,0x20,0xa9,0x9a,0xf4,0xf8,0x3f,0xe5,0x9f,0x98,0x5d,0x3e,0x3b,0x8d,0x63,0xa7,0x5e,0x01,0x20,0x75,0x6f,0x8b,0xff,0xa4,0x8e,0x00,0x00]
    correct_result_new = [0xfc,0x24,0x23,0x8f,0x96,0x0c,0x14,0x72,0x73,0x86,0x29,0x5b,0xd0,0xfc,0xec,0xba,0xce,0x8f,0x2a,0xef,0x74,0xad,0x71,0x08,0x77,0x1c,0x7c,0x83,0x2b,0x0a,0x9f,0x00]

    if variant:
        print("Pass" if correct_result_new==r else "Fail")
    else:
        print("Pass" if correct_result_old==r else "Fail")

# Constants ahoy!

# Tboxes, Sbox (generated from TBox), Blake and Groestl constant lists
# Other constants are sprinkled thought their respective functions, these
# are here to somewhat improve readabillity.

# There's nothing below them besides the if __name__.. to call main
S1 = [0xa56363c6,0x847c7cf8,0x997777ee,0x8d7b7bf6,0x0df2f2ff,0xbd6b6bd6,0xb16f6fde,0x54c5c591,0x50303060,0x03010102,0xa96767ce,0x7d2b2b56,0x19fefee7,0x62d7d7b5,0xe6abab4d,0x9a7676ec,0x45caca8f,0x9d82821f,0x40c9c989,0x877d7dfa,0x15fafaef,0xeb5959b2,0xc947478e,0x0bf0f0fb,0xecadad41,0x67d4d4b3,0xfda2a25f,0xeaafaf45,0xbf9c9c23,0xf7a4a453,0x967272e4,0x5bc0c09b,0xc2b7b775,0x1cfdfde1,0xae93933d,0x6a26264c,0x5a36366c,0x413f3f7e,0x02f7f7f5,0x4fcccc83,0x5c343468,0xf4a5a551,0x34e5e5d1,0x08f1f1f9,0x937171e2,0x73d8d8ab,0x53313162,0x3f15152a,0x0c040408,0x52c7c795,0x65232346,0x5ec3c39d,0x28181830,0xa1969637,0x0f05050a,0xb59a9a2f,0x0907070e,0x36121224,0x9b80801b,0x3de2e2df,0x26ebebcd,0x6927274e,0xcdb2b27f,0x9f7575ea,0x1b090912,0x9e83831d,0x742c2c58,0x2e1a1a34,0x2d1b1b36,0xb26e6edc,0xee5a5ab4,0xfba0a05b,0xf65252a4,0x4d3b3b76,0x61d6d6b7,0xceb3b37d,0x7b292952,0x3ee3e3dd,0x712f2f5e,0x97848413,0xf55353a6,0x68d1d1b9,0x00000000,0x2cededc1,0x60202040,0x1ffcfce3,0xc8b1b179,0xed5b5bb6,0xbe6a6ad4,0x46cbcb8d,0xd9bebe67,0x4b393972,0xde4a4a94,0xd44c4c98,0xe85858b0,0x4acfcf85,0x6bd0d0bb,0x2aefefc5,0xe5aaaa4f,0x16fbfbed,0xc5434386,0xd74d4d9a,0x55333366,0x94858511,0xcf45458a,0x10f9f9e9,0x06020204,0x817f7ffe,0xf05050a0,0x443c3c78,0xba9f9f25,0xe3a8a84b,0xf35151a2,0xfea3a35d,0xc0404080,0x8a8f8f05,0xad92923f,0xbc9d9d21,0x48383870,0x04f5f5f1,0xdfbcbc63,0xc1b6b677,0x75dadaaf,0x63212142,0x30101020,0x1affffe5,0x0ef3f3fd,0x6dd2d2bf,0x4ccdcd81,0x140c0c18,0x35131326,0x2fececc3,0xe15f5fbe,0xa2979735,0xcc444488,0x3917172e,0x57c4c493,0xf2a7a755,0x827e7efc,0x473d3d7a,0xac6464c8,0xe75d5dba,0x2b191932,0x957373e6,0xa06060c0,0x98818119,0xd14f4f9e,0x7fdcdca3,0x66222244,0x7e2a2a54,0xab90903b,0x8388880b,0xca46468c,0x29eeeec7,0xd3b8b86b,0x3c141428,0x79dedea7,0xe25e5ebc,0x1d0b0b16,0x76dbdbad,0x3be0e0db,0x56323264,0x4e3a3a74,0x1e0a0a14,0xdb494992,0x0a06060c,0x6c242448,0xe45c5cb8,0x5dc2c29f,0x6ed3d3bd,0xefacac43,0xa66262c4,0xa8919139,0xa4959531,0x37e4e4d3,0x8b7979f2,0x32e7e7d5,0x43c8c88b,0x5937376e,0xb76d6dda,0x8c8d8d01,0x64d5d5b1,0xd24e4e9c,0xe0a9a949,0xb46c6cd8,0xfa5656ac,0x07f4f4f3,0x25eaeacf,0xaf6565ca,0x8e7a7af4,0xe9aeae47,0x18080810,0xd5baba6f,0x887878f0,0x6f25254a,0x722e2e5c,0x241c1c38,0xf1a6a657,0xc7b4b473,0x51c6c697,0x23e8e8cb,0x7cdddda1,0x9c7474e8,0x211f1f3e,0xdd4b4b96,0xdcbdbd61,0x868b8b0d,0x858a8a0f,0x907070e0,0x423e3e7c,0xc4b5b571,0xaa6666cc,0xd8484890,0x05030306,0x01f6f6f7,0x120e0e1c,0xa36161c2,0x5f35356a,0xf95757ae,0xd0b9b969,0x91868617,0x58c1c199,0x271d1d3a,0xb99e9e27,0x38e1e1d9,0x13f8f8eb,0xb398982b,0x33111122,0xbb6969d2,0x70d9d9a9,0x898e8e07,0xa7949433,0xb69b9b2d,0x221e1e3c,0x92878715,0x20e9e9c9,0x49cece87,0xff5555aa,0x78282850,0x7adfdfa5,0x8f8c8c03,0xf8a1a159,0x80898909,0x170d0d1a,0xdabfbf65,0x31e6e6d7,0xc6424284,0xb86868d0,0xc3414182,0xb0999929,0x772d2d5a,0x110f0f1e,0xcbb0b07b,0xfc5454a8,0xd6bbbb6d,0x3a16162c]
S2 = [0x6363c6a5,0x7c7cf884,0x7777ee99,0x7b7bf68d,0xf2f2ff0d,0x6b6bd6bd,0x6f6fdeb1,0xc5c59154,0x30306050,0x01010203,0x6767cea9,0x2b2b567d,0xfefee719,0xd7d7b562,0xabab4de6,0x7676ec9a,0xcaca8f45,0x82821f9d,0xc9c98940,0x7d7dfa87,0xfafaef15,0x5959b2eb,0x47478ec9,0xf0f0fb0b,0xadad41ec,0xd4d4b367,0xa2a25ffd,0xafaf45ea,0x9c9c23bf,0xa4a453f7,0x7272e496,0xc0c09b5b,0xb7b775c2,0xfdfde11c,0x93933dae,0x26264c6a,0x36366c5a,0x3f3f7e41,0xf7f7f502,0xcccc834f,0x3434685c,0xa5a551f4,0xe5e5d134,0xf1f1f908,0x7171e293,0xd8d8ab73,0x31316253,0x15152a3f,0x0404080c,0xc7c79552,0x23234665,0xc3c39d5e,0x18183028,0x969637a1,0x05050a0f,0x9a9a2fb5,0x07070e09,0x12122436,0x80801b9b,0xe2e2df3d,0xebebcd26,0x27274e69,0xb2b27fcd,0x7575ea9f,0x0909121b,0x83831d9e,0x2c2c5874,0x1a1a342e,0x1b1b362d,0x6e6edcb2,0x5a5ab4ee,0xa0a05bfb,0x5252a4f6,0x3b3b764d,0xd6d6b761,0xb3b37dce,0x2929527b,0xe3e3dd3e,0x2f2f5e71,0x84841397,0x5353a6f5,0xd1d1b968,0x00000000,0xededc12c,0x20204060,0xfcfce31f,0xb1b179c8,0x5b5bb6ed,0x6a6ad4be,0xcbcb8d46,0xbebe67d9,0x3939724b,0x4a4a94de,0x4c4c98d4,0x5858b0e8,0xcfcf854a,0xd0d0bb6b,0xefefc52a,0xaaaa4fe5,0xfbfbed16,0x434386c5,0x4d4d9ad7,0x33336655,0x85851194,0x45458acf,0xf9f9e910,0x02020406,0x7f7ffe81,0x5050a0f0,0x3c3c7844,0x9f9f25ba,0xa8a84be3,0x5151a2f3,0xa3a35dfe,0x404080c0,0x8f8f058a,0x92923fad,0x9d9d21bc,0x38387048,0xf5f5f104,0xbcbc63df,0xb6b677c1,0xdadaaf75,0x21214263,0x10102030,0xffffe51a,0xf3f3fd0e,0xd2d2bf6d,0xcdcd814c,0x0c0c1814,0x13132635,0xececc32f,0x5f5fbee1,0x979735a2,0x444488cc,0x17172e39,0xc4c49357,0xa7a755f2,0x7e7efc82,0x3d3d7a47,0x6464c8ac,0x5d5dbae7,0x1919322b,0x7373e695,0x6060c0a0,0x81811998,0x4f4f9ed1,0xdcdca37f,0x22224466,0x2a2a547e,0x90903bab,0x88880b83,0x46468cca,0xeeeec729,0xb8b86bd3,0x1414283c,0xdedea779,0x5e5ebce2,0x0b0b161d,0xdbdbad76,0xe0e0db3b,0x32326456,0x3a3a744e,0x0a0a141e,0x494992db,0x06060c0a,0x2424486c,0x5c5cb8e4,0xc2c29f5d,0xd3d3bd6e,0xacac43ef,0x6262c4a6,0x919139a8,0x959531a4,0xe4e4d337,0x7979f28b,0xe7e7d532,0xc8c88b43,0x37376e59,0x6d6ddab7,0x8d8d018c,0xd5d5b164,0x4e4e9cd2,0xa9a949e0,0x6c6cd8b4,0x5656acfa,0xf4f4f307,0xeaeacf25,0x6565caaf,0x7a7af48e,0xaeae47e9,0x08081018,0xbaba6fd5,0x7878f088,0x25254a6f,0x2e2e5c72,0x1c1c3824,0xa6a657f1,0xb4b473c7,0xc6c69751,0xe8e8cb23,0xdddda17c,0x7474e89c,0x1f1f3e21,0x4b4b96dd,0xbdbd61dc,0x8b8b0d86,0x8a8a0f85,0x7070e090,0x3e3e7c42,0xb5b571c4,0x6666ccaa,0x484890d8,0x03030605,0xf6f6f701,0x0e0e1c12,0x6161c2a3,0x35356a5f,0x5757aef9,0xb9b969d0,0x86861791,0xc1c19958,0x1d1d3a27,0x9e9e27b9,0xe1e1d938,0xf8f8eb13,0x98982bb3,0x11112233,0x6969d2bb,0xd9d9a970,0x8e8e0789,0x949433a7,0x9b9b2db6,0x1e1e3c22,0x87871592,0xe9e9c920,0xcece8749,0x5555aaff,0x28285078,0xdfdfa57a,0x8c8c038f,0xa1a159f8,0x89890980,0x0d0d1a17,0xbfbf65da,0xe6e6d731,0x424284c6,0x6868d0b8,0x414182c3,0x999929b0,0x2d2d5a77,0x0f0f1e11,0xb0b07bcb,0x5454a8fc,0xbbbb6dd6,0x16162c3a]
S3 = [0x63c6a563,0x7cf8847c,0x77ee9977,0x7bf68d7b,0xf2ff0df2,0x6bd6bd6b,0x6fdeb16f,0xc59154c5,0x30605030,0x01020301,0x67cea967,0x2b567d2b,0xfee719fe,0xd7b562d7,0xab4de6ab,0x76ec9a76,0xca8f45ca,0x821f9d82,0xc98940c9,0x7dfa877d,0xfaef15fa,0x59b2eb59,0x478ec947,0xf0fb0bf0,0xad41ecad,0xd4b367d4,0xa25ffda2,0xaf45eaaf,0x9c23bf9c,0xa453f7a4,0x72e49672,0xc09b5bc0,0xb775c2b7,0xfde11cfd,0x933dae93,0x264c6a26,0x366c5a36,0x3f7e413f,0xf7f502f7,0xcc834fcc,0x34685c34,0xa551f4a5,0xe5d134e5,0xf1f908f1,0x71e29371,0xd8ab73d8,0x31625331,0x152a3f15,0x04080c04,0xc79552c7,0x23466523,0xc39d5ec3,0x18302818,0x9637a196,0x050a0f05,0x9a2fb59a,0x070e0907,0x12243612,0x801b9b80,0xe2df3de2,0xebcd26eb,0x274e6927,0xb27fcdb2,0x75ea9f75,0x09121b09,0x831d9e83,0x2c58742c,0x1a342e1a,0x1b362d1b,0x6edcb26e,0x5ab4ee5a,0xa05bfba0,0x52a4f652,0x3b764d3b,0xd6b761d6,0xb37dceb3,0x29527b29,0xe3dd3ee3,0x2f5e712f,0x84139784,0x53a6f553,0xd1b968d1,0x00000000,0xedc12ced,0x20406020,0xfce31ffc,0xb179c8b1,0x5bb6ed5b,0x6ad4be6a,0xcb8d46cb,0xbe67d9be,0x39724b39,0x4a94de4a,0x4c98d44c,0x58b0e858,0xcf854acf,0xd0bb6bd0,0xefc52aef,0xaa4fe5aa,0xfbed16fb,0x4386c543,0x4d9ad74d,0x33665533,0x85119485,0x458acf45,0xf9e910f9,0x02040602,0x7ffe817f,0x50a0f050,0x3c78443c,0x9f25ba9f,0xa84be3a8,0x51a2f351,0xa35dfea3,0x4080c040,0x8f058a8f,0x923fad92,0x9d21bc9d,0x38704838,0xf5f104f5,0xbc63dfbc,0xb677c1b6,0xdaaf75da,0x21426321,0x10203010,0xffe51aff,0xf3fd0ef3,0xd2bf6dd2,0xcd814ccd,0x0c18140c,0x13263513,0xecc32fec,0x5fbee15f,0x9735a297,0x4488cc44,0x172e3917,0xc49357c4,0xa755f2a7,0x7efc827e,0x3d7a473d,0x64c8ac64,0x5dbae75d,0x19322b19,0x73e69573,0x60c0a060,0x81199881,0x4f9ed14f,0xdca37fdc,0x22446622,0x2a547e2a,0x903bab90,0x880b8388,0x468cca46,0xeec729ee,0xb86bd3b8,0x14283c14,0xdea779de,0x5ebce25e,0x0b161d0b,0xdbad76db,0xe0db3be0,0x32645632,0x3a744e3a,0x0a141e0a,0x4992db49,0x060c0a06,0x24486c24,0x5cb8e45c,0xc29f5dc2,0xd3bd6ed3,0xac43efac,0x62c4a662,0x9139a891,0x9531a495,0xe4d337e4,0x79f28b79,0xe7d532e7,0xc88b43c8,0x376e5937,0x6ddab76d,0x8d018c8d,0xd5b164d5,0x4e9cd24e,0xa949e0a9,0x6cd8b46c,0x56acfa56,0xf4f307f4,0xeacf25ea,0x65caaf65,0x7af48e7a,0xae47e9ae,0x08101808,0xba6fd5ba,0x78f08878,0x254a6f25,0x2e5c722e,0x1c38241c,0xa657f1a6,0xb473c7b4,0xc69751c6,0xe8cb23e8,0xdda17cdd,0x74e89c74,0x1f3e211f,0x4b96dd4b,0xbd61dcbd,0x8b0d868b,0x8a0f858a,0x70e09070,0x3e7c423e,0xb571c4b5,0x66ccaa66,0x4890d848,0x03060503,0xf6f701f6,0x0e1c120e,0x61c2a361,0x356a5f35,0x57aef957,0xb969d0b9,0x86179186,0xc19958c1,0x1d3a271d,0x9e27b99e,0xe1d938e1,0xf8eb13f8,0x982bb398,0x11223311,0x69d2bb69,0xd9a970d9,0x8e07898e,0x9433a794,0x9b2db69b,0x1e3c221e,0x87159287,0xe9c920e9,0xce8749ce,0x55aaff55,0x28507828,0xdfa57adf,0x8c038f8c,0xa159f8a1,0x89098089,0x0d1a170d,0xbf65dabf,0xe6d731e6,0x4284c642,0x68d0b868,0x4182c341,0x9929b099,0x2d5a772d,0x0f1e110f,0xb07bcbb0,0x54a8fc54,0xbb6dd6bb,0x162c3a16]
S4 = [0xc6a56363,0xf8847c7c,0xee997777,0xf68d7b7b,0xff0df2f2,0xd6bd6b6b,0xdeb16f6f,0x9154c5c5,0x60503030,0x02030101,0xcea96767,0x567d2b2b,0xe719fefe,0xb562d7d7,0x4de6abab,0xec9a7676,0x8f45caca,0x1f9d8282,0x8940c9c9,0xfa877d7d,0xef15fafa,0xb2eb5959,0x8ec94747,0xfb0bf0f0,0x41ecadad,0xb367d4d4,0x5ffda2a2,0x45eaafaf,0x23bf9c9c,0x53f7a4a4,0xe4967272,0x9b5bc0c0,0x75c2b7b7,0xe11cfdfd,0x3dae9393,0x4c6a2626,0x6c5a3636,0x7e413f3f,0xf502f7f7,0x834fcccc,0x685c3434,0x51f4a5a5,0xd134e5e5,0xf908f1f1,0xe2937171,0xab73d8d8,0x62533131,0x2a3f1515,0x080c0404,0x9552c7c7,0x46652323,0x9d5ec3c3,0x30281818,0x37a19696,0x0a0f0505,0x2fb59a9a,0x0e090707,0x24361212,0x1b9b8080,0xdf3de2e2,0xcd26ebeb,0x4e692727,0x7fcdb2b2,0xea9f7575,0x121b0909,0x1d9e8383,0x58742c2c,0x342e1a1a,0x362d1b1b,0xdcb26e6e,0xb4ee5a5a,0x5bfba0a0,0xa4f65252,0x764d3b3b,0xb761d6d6,0x7dceb3b3,0x527b2929,0xdd3ee3e3,0x5e712f2f,0x13978484,0xa6f55353,0xb968d1d1,0x00000000,0xc12ceded,0x40602020,0xe31ffcfc,0x79c8b1b1,0xb6ed5b5b,0xd4be6a6a,0x8d46cbcb,0x67d9bebe,0x724b3939,0x94de4a4a,0x98d44c4c,0xb0e85858,0x854acfcf,0xbb6bd0d0,0xc52aefef,0x4fe5aaaa,0xed16fbfb,0x86c54343,0x9ad74d4d,0x66553333,0x11948585,0x8acf4545,0xe910f9f9,0x04060202,0xfe817f7f,0xa0f05050,0x78443c3c,0x25ba9f9f,0x4be3a8a8,0xa2f35151,0x5dfea3a3,0x80c04040,0x058a8f8f,0x3fad9292,0x21bc9d9d,0x70483838,0xf104f5f5,0x63dfbcbc,0x77c1b6b6,0xaf75dada,0x42632121,0x20301010,0xe51affff,0xfd0ef3f3,0xbf6dd2d2,0x814ccdcd,0x18140c0c,0x26351313,0xc32fecec,0xbee15f5f,0x35a29797,0x88cc4444,0x2e391717,0x9357c4c4,0x55f2a7a7,0xfc827e7e,0x7a473d3d,0xc8ac6464,0xbae75d5d,0x322b1919,0xe6957373,0xc0a06060,0x19988181,0x9ed14f4f,0xa37fdcdc,0x44662222,0x547e2a2a,0x3bab9090,0x0b838888,0x8cca4646,0xc729eeee,0x6bd3b8b8,0x283c1414,0xa779dede,0xbce25e5e,0x161d0b0b,0xad76dbdb,0xdb3be0e0,0x64563232,0x744e3a3a,0x141e0a0a,0x92db4949,0x0c0a0606,0x486c2424,0xb8e45c5c,0x9f5dc2c2,0xbd6ed3d3,0x43efacac,0xc4a66262,0x39a89191,0x31a49595,0xd337e4e4,0xf28b7979,0xd532e7e7,0x8b43c8c8,0x6e593737,0xdab76d6d,0x018c8d8d,0xb164d5d5,0x9cd24e4e,0x49e0a9a9,0xd8b46c6c,0xacfa5656,0xf307f4f4,0xcf25eaea,0xcaaf6565,0xf48e7a7a,0x47e9aeae,0x10180808,0x6fd5baba,0xf0887878,0x4a6f2525,0x5c722e2e,0x38241c1c,0x57f1a6a6,0x73c7b4b4,0x9751c6c6,0xcb23e8e8,0xa17cdddd,0xe89c7474,0x3e211f1f,0x96dd4b4b,0x61dcbdbd,0x0d868b8b,0x0f858a8a,0xe0907070,0x7c423e3e,0x71c4b5b5,0xccaa6666,0x90d84848,0x06050303,0xf701f6f6,0x1c120e0e,0xc2a36161,0x6a5f3535,0xaef95757,0x69d0b9b9,0x17918686,0x9958c1c1,0x3a271d1d,0x27b99e9e,0xd938e1e1,0xeb13f8f8,0x2bb39898,0x22331111,0xd2bb6969,0xa970d9d9,0x07898e8e,0x33a79494,0x2db69b9b,0x3c221e1e,0x15928787,0xc920e9e9,0x8749cece,0xaaff5555,0x50782828,0xa57adfdf,0x038f8c8c,0x59f8a1a1,0x09808989,0x1a170d0d,0x65dabfbf,0xd731e6e6,0x84c64242,0xd0b86868,0x82c34141,0x29b09999,0x5a772d2d,0x1e110f0f,0x7bcbb0b0,0xa8fc5454,0x6dd6bbbb,0x2c3a1616]
SBox = [a&255 for a in S3]

groestlT = [
      0xa5f432c6,0x84976ff8,0x99b05eee,0x8d8c7af6,0x0d17e8ff,0xbddc0ad6,0xb1c816de,0x54fc6d91,0x50f09060,0x03050702,0xa9e02ece,0x7d87d156,0x192bcce7,0x62a613b5,0xe6317c4d,0x9ab559ec,0x45cf408f,0x9dbca31f,0x40c04989,0x879268fa,0x153fd0ef,0xeb2694b2,0xc940ce8e,0x0b1de6fb,0xec2f6e41,0x67a91ab3,0xfd1c435f,0xea256045,0xbfdaf923,0xf7025153,0x96a145e4,0x5bed769b,0xc25d2875,0x1c24c5e1,0xaee9d43d,0x6abef24c,0x5aee826c,0x41c3bd7e,0x0206f3f5,0x4fd15283,0x5ce48c68,0xf4075651,0x345c8dd1,0x0818e1f9,0x93ae4ce2,0x73953eab,0x53f59762,0x3f416b2a,0x0c141c08,0x52f66395,0x65afe946,0x5ee27f9d,0x28784830,0xa1f8cf37,0x0f111b0a,0xb5c4eb2f,0x091b150e,0x365a7e24,0x9bb6ad1b,0x3d4798df,0x266aa7cd,0x69bbf54e,0xcd4c337f,0x9fba50ea,0x1b2d3f12,0x9eb9a41d,0x749cc458,0x2e724634,0x2d774136,0xb2cd11dc,0xee299db4,0xfb164d5b,0xf601a5a4,0x4dd7a176,0x61a314b7,0xce49347d,0x7b8ddf52,0x3e429fdd,0x7193cd5e,0x97a2b113,0xf504a2a6,0x68b801b9,0x00000000,0x2c74b5c1,0x60a0e040,0x1f21c2e3,0xc8433a79,0xed2c9ab6,0xbed90dd4,0x46ca478d,0xd9701767,0x4bddaf72,0xde79ed94,0xd467ff98,0xe82393b0,0x4ade5b85,0x6bbd06bb,0x2a7ebbc5,0xe5347b4f,0x163ad7ed,0xc554d286,0xd762f89a,0x55ff9966,0x94a7b611,0xcf4ac08a,0x1030d9e9,0x060a0e04,0x819866fe,0xf00baba0,0x44ccb478,0xbad5f025,0xe33e754b,0xf30eaca2,0xfe19445d,0xc05bdb80,0x8a858005,0xadecd33f,0xbcdffe21,0x48d8a870,0x040cfdf1,0xdf7a1963,0xc1582f77,0x759f30af,0x63a5e742,0x30507020,0x1a2ecbe5,0x0e12effd,0x6db708bf,0x4cd45581,0x143c2418,0x355f7926,0x2f71b2c3,0xe13886be,0xa2fdc835,0xcc4fc788,0x394b652e,0x57f96a93,0xf20d5855,0x829d61fc,0x47c9b37a,0xacef27c8,0xe73288ba,0x2b7d4f32,0x95a442e6,0xa0fb3bc0,0x98b3aa19,0xd168f69e,0x7f8122a3,0x66aaee44,0x7e82d654,0xabe6dd3b,0x839e950b,0xca45c98c,0x297bbcc7,0xd36e056b,0x3c446c28,0x798b2ca7,0xe23d81bc,0x1d273116,0x769a37ad,0x3b4d96db,0x56fa9e64,0x4ed2a674,0x1e223614,0xdb76e492,0x0a1e120c,0x6cb4fc48,0xe4378fb8,0x5de7789f,0x6eb20fbd,0xef2a6943,0xa6f135c4,0xa8e3da39,0xa4f7c631,0x37598ad3,0x8b8674f2,0x325683d5,0x43c54e8b,0x59eb856e,0xb7c218da,0x8c8f8e01,0x64ac1db1,0xd26df19c,0xe03b7249,0xb4c71fd8,0xfa15b9ac,0x0709faf3,0x256fa0cf,0xafea20ca,0x8e897df4,0xe9206747,0x18283810,0xd5640b6f,0x888373f0,0x6fb1fb4a,0x7296ca5c,0x246c5438,0xf1085f57,0xc7522173,0x51f36497,0x2365aecb,0x7c8425a1,0x9cbf57e8,0x21635d3e,0xdd7cea96,0xdc7f1e61,0x86919c0d,0x85949b0f,0x90ab4be0,0x42c6ba7c,0xc4572671,0xaae529cc,0xd873e390,0x050f0906,0x0103f4f7,0x12362a1c,0xa3fe3cc2,0x5fe18b6a,0xf910beae,0xd06b0269,0x91a8bf17,0x58e87199,0x2769533a,0xb9d0f727,0x384891d9,0x1335deeb,0xb3cee52b,0x33557722,0xbbd604d2,0x709039a9,0x89808707,0xa7f2c133,0xb6c1ec2d,0x22665a3c,0x92adb815,0x2060a9c9,0x49db5c87,0xff1ab0aa,0x7888d850,0x7a8e2ba5,0x8f8a8903,0xf8134a59,0x809b9209,0x1739231a,0xda751065,0x315384d7,0xc651d584,0xb8d303d0,0xc35edc82,0xb0cbe229,0x7799c35a,0x11332d1e,0xcb463d7b,0xfc1fb7a8,0xd6610c6d,0x3a4e622c,
      0xf432c6c6,0x976ff8f8,0xb05eeeee,0x8c7af6f6,0x17e8ffff,0xdc0ad6d6,0xc816dede,0xfc6d9191,0xf0906060,0x05070202,0xe02ecece,0x87d15656,0x2bcce7e7,0xa613b5b5,0x317c4d4d,0xb559ecec,0xcf408f8f,0xbca31f1f,0xc0498989,0x9268fafa,0x3fd0efef,0x2694b2b2,0x40ce8e8e,0x1de6fbfb,0x2f6e4141,0xa91ab3b3,0x1c435f5f,0x25604545,0xdaf92323,0x02515353,0xa145e4e4,0xed769b9b,0x5d287575,0x24c5e1e1,0xe9d43d3d,0xbef24c4c,0xee826c6c,0xc3bd7e7e,0x06f3f5f5,0xd1528383,0xe48c6868,0x07565151,0x5c8dd1d1,0x18e1f9f9,0xae4ce2e2,0x953eabab,0xf5976262,0x416b2a2a,0x141c0808,0xf6639595,0xafe94646,0xe27f9d9d,0x78483030,0xf8cf3737,0x111b0a0a,0xc4eb2f2f,0x1b150e0e,0x5a7e2424,0xb6ad1b1b,0x4798dfdf,0x6aa7cdcd,0xbbf54e4e,0x4c337f7f,0xba50eaea,0x2d3f1212,0xb9a41d1d,0x9cc45858,0x72463434,0x77413636,0xcd11dcdc,0x299db4b4,0x164d5b5b,0x01a5a4a4,0xd7a17676,0xa314b7b7,0x49347d7d,0x8ddf5252,0x429fdddd,0x93cd5e5e,0xa2b11313,0x04a2a6a6,0xb801b9b9,0x00000000,0x74b5c1c1,0xa0e04040,0x21c2e3e3,0x433a7979,0x2c9ab6b6,0xd90dd4d4,0xca478d8d,0x70176767,0xddaf7272,0x79ed9494,0x67ff9898,0x2393b0b0,0xde5b8585,0xbd06bbbb,0x7ebbc5c5,0x347b4f4f,0x3ad7eded,0x54d28686,0x62f89a9a,0xff996666,0xa7b61111,0x4ac08a8a,0x30d9e9e9,0x0a0e0404,0x9866fefe,0x0baba0a0,0xccb47878,0xd5f02525,0x3e754b4b,0x0eaca2a2,0x19445d5d,0x5bdb8080,0x85800505,0xecd33f3f,0xdffe2121,0xd8a87070,0x0cfdf1f1,0x7a196363,0x582f7777,0x9f30afaf,0xa5e74242,0x50702020,0x2ecbe5e5,0x12effdfd,0xb708bfbf,0xd4558181,0x3c241818,0x5f792626,0x71b2c3c3,0x3886bebe,0xfdc83535,0x4fc78888,0x4b652e2e,0xf96a9393,0x0d585555,0x9d61fcfc,0xc9b37a7a,0xef27c8c8,0x3288baba,0x7d4f3232,0xa442e6e6,0xfb3bc0c0,0xb3aa1919,0x68f69e9e,0x8122a3a3,0xaaee4444,0x82d65454,0xe6dd3b3b,0x9e950b0b,0x45c98c8c,0x7bbcc7c7,0x6e056b6b,0x446c2828,0x8b2ca7a7,0x3d81bcbc,0x27311616,0x9a37adad,0x4d96dbdb,0xfa9e6464,0xd2a67474,0x22361414,0x76e49292,0x1e120c0c,0xb4fc4848,0x378fb8b8,0xe7789f9f,0xb20fbdbd,0x2a694343,0xf135c4c4,0xe3da3939,0xf7c63131,0x598ad3d3,0x8674f2f2,0x5683d5d5,0xc54e8b8b,0xeb856e6e,0xc218dada,0x8f8e0101,0xac1db1b1,0x6df19c9c,0x3b724949,0xc71fd8d8,0x15b9acac,0x09faf3f3,0x6fa0cfcf,0xea20caca,0x897df4f4,0x20674747,0x28381010,0x640b6f6f,0x8373f0f0,0xb1fb4a4a,0x96ca5c5c,0x6c543838,0x085f5757,0x52217373,0xf3649797,0x65aecbcb,0x8425a1a1,0xbf57e8e8,0x635d3e3e,0x7cea9696,0x7f1e6161,0x919c0d0d,0x949b0f0f,0xab4be0e0,0xc6ba7c7c,0x57267171,0xe529cccc,0x73e39090,0x0f090606,0x03f4f7f7,0x362a1c1c,0xfe3cc2c2,0xe18b6a6a,0x10beaeae,0x6b026969,0xa8bf1717,0xe8719999,0x69533a3a,0xd0f72727,0x4891d9d9,0x35deebeb,0xcee52b2b,0x55772222,0xd604d2d2,0x9039a9a9,0x80870707,0xf2c13333,0xc1ec2d2d,0x665a3c3c,0xadb81515,0x60a9c9c9,0xdb5c8787,0x1ab0aaaa,0x88d85050,0x8e2ba5a5,0x8a890303,0x134a5959,0x9b920909,0x39231a1a,0x75106565,0x5384d7d7,0x51d58484,0xd303d0d0,0x5edc8282,0xcbe22929,0x99c35a5a,0x332d1e1e,0x463d7b7b,0x1fb7a8a8,0x610c6d6d,0x4e622c2c,
      0x32c6c6a5,0x6ff8f884,0x5eeeee99,0x7af6f68d,0xe8ffff0d,0x0ad6d6bd,0x16dedeb1,0x6d919154,0x90606050,0x07020203,0x2ececea9,0xd156567d,0xcce7e719,0x13b5b562,0x7c4d4de6,0x59ecec9a,0x408f8f45,0xa31f1f9d,0x49898940,0x68fafa87,0xd0efef15,0x94b2b2eb,0xce8e8ec9,0xe6fbfb0b,0x6e4141ec,0x1ab3b367,0x435f5ffd,0x604545ea,0xf92323bf,0x515353f7,0x45e4e496,0x769b9b5b,0x287575c2,0xc5e1e11c,0xd43d3dae,0xf24c4c6a,0x826c6c5a,0xbd7e7e41,0xf3f5f502,0x5283834f,0x8c68685c,0x565151f4,0x8dd1d134,0xe1f9f908,0x4ce2e293,0x3eabab73,0x97626253,0x6b2a2a3f,0x1c08080c,0x63959552,0xe9464665,0x7f9d9d5e,0x48303028,0xcf3737a1,0x1b0a0a0f,0xeb2f2fb5,0x150e0e09,0x7e242436,0xad1b1b9b,0x98dfdf3d,0xa7cdcd26,0xf54e4e69,0x337f7fcd,0x50eaea9f,0x3f12121b,0xa41d1d9e,0xc4585874,0x4634342e,0x4136362d,0x11dcdcb2,0x9db4b4ee,0x4d5b5bfb,0xa5a4a4f6,0xa176764d,0x14b7b761,0x347d7dce,0xdf52527b,0x9fdddd3e,0xcd5e5e71,0xb1131397,0xa2a6a6f5,0x01b9b968,0x00000000,0xb5c1c12c,0xe0404060,0xc2e3e31f,0x3a7979c8,0x9ab6b6ed,0x0dd4d4be,0x478d8d46,0x176767d9,0xaf72724b,0xed9494de,0xff9898d4,0x93b0b0e8,0x5b85854a,0x06bbbb6b,0xbbc5c52a,0x7b4f4fe5,0xd7eded16,0xd28686c5,0xf89a9ad7,0x99666655,0xb6111194,0xc08a8acf,0xd9e9e910,0x0e040406,0x66fefe81,0xaba0a0f0,0xb4787844,0xf02525ba,0x754b4be3,0xaca2a2f3,0x445d5dfe,0xdb8080c0,0x8005058a,0xd33f3fad,0xfe2121bc,0xa8707048,0xfdf1f104,0x196363df,0x2f7777c1,0x30afaf75,0xe7424263,0x70202030,0xcbe5e51a,0xeffdfd0e,0x08bfbf6d,0x5581814c,0x24181814,0x79262635,0xb2c3c32f,0x86bebee1,0xc83535a2,0xc78888cc,0x652e2e39,0x6a939357,0x585555f2,0x61fcfc82,0xb37a7a47,0x27c8c8ac,0x88babae7,0x4f32322b,0x42e6e695,0x3bc0c0a0,0xaa191998,0xf69e9ed1,0x22a3a37f,0xee444466,0xd654547e,0xdd3b3bab,0x950b0b83,0xc98c8cca,0xbcc7c729,0x056b6bd3,0x6c28283c,0x2ca7a779,0x81bcbce2,0x3116161d,0x37adad76,0x96dbdb3b,0x9e646456,0xa674744e,0x3614141e,0xe49292db,0x120c0c0a,0xfc48486c,0x8fb8b8e4,0x789f9f5d,0x0fbdbd6e,0x694343ef,0x35c4c4a6,0xda3939a8,0xc63131a4,0x8ad3d337,0x74f2f28b,0x83d5d532,0x4e8b8b43,0x856e6e59,0x18dadab7,0x8e01018c,0x1db1b164,0xf19c9cd2,0x724949e0,0x1fd8d8b4,0xb9acacfa,0xfaf3f307,0xa0cfcf25,0x20cacaaf,0x7df4f48e,0x674747e9,0x38101018,0x0b6f6fd5,0x73f0f088,0xfb4a4a6f,0xca5c5c72,0x54383824,0x5f5757f1,0x217373c7,0x64979751,0xaecbcb23,0x25a1a17c,0x57e8e89c,0x5d3e3e21,0xea9696dd,0x1e6161dc,0x9c0d0d86,0x9b0f0f85,0x4be0e090,0xba7c7c42,0x267171c4,0x29ccccaa,0xe39090d8,0x09060605,0xf4f7f701,0x2a1c1c12,0x3cc2c2a3,0x8b6a6a5f,0xbeaeaef9,0x026969d0,0xbf171791,0x71999958,0x533a3a27,0xf72727b9,0x91d9d938,0xdeebeb13,0xe52b2bb3,0x77222233,0x04d2d2bb,0x39a9a970,0x87070789,0xc13333a7,0xec2d2db6,0x5a3c3c22,0xb8151592,0xa9c9c920,0x5c878749,0xb0aaaaff,0xd8505078,0x2ba5a57a,0x8903038f,0x4a5959f8,0x92090980,0x231a1a17,0x106565da,0x84d7d731,0xd58484c6,0x03d0d0b8,0xdc8282c3,0xe22929b0,0xc35a5a77,0x2d1e1e11,0x3d7b7bcb,0xb7a8a8fc,0x0c6d6dd6,0x622c2c3a,
      0xc6c6a597,0xf8f884eb,0xeeee99c7,0xf6f68df7,0xffff0de5,0xd6d6bdb7,0xdedeb1a7,0x91915439,0x606050c0,0x02020304,0xcecea987,0x56567dac,0xe7e719d5,0xb5b56271,0x4d4de69a,0xecec9ac3,0x8f8f4505,0x1f1f9d3e,0x89894009,0xfafa87ef,0xefef15c5,0xb2b2eb7f,0x8e8ec907,0xfbfb0bed,0x4141ec82,0xb3b3677d,0x5f5ffdbe,0x4545ea8a,0x2323bf46,0x5353f7a6,0xe4e496d3,0x9b9b5b2d,0x7575c2ea,0xe1e11cd9,0x3d3dae7a,0x4c4c6a98,0x6c6c5ad8,0x7e7e41fc,0xf5f502f1,0x83834f1d,0x68685cd0,0x5151f4a2,0xd1d134b9,0xf9f908e9,0xe2e293df,0xabab734d,0x626253c4,0x2a2a3f54,0x08080c10,0x95955231,0x4646658c,0x9d9d5e21,0x30302860,0x3737a16e,0x0a0a0f14,0x2f2fb55e,0x0e0e091c,0x24243648,0x1b1b9b36,0xdfdf3da5,0xcdcd2681,0x4e4e699c,0x7f7fcdfe,0xeaea9fcf,0x12121b24,0x1d1d9e3a,0x585874b0,0x34342e68,0x36362d6c,0xdcdcb2a3,0xb4b4ee73,0x5b5bfbb6,0xa4a4f653,0x76764dec,0xb7b76175,0x7d7dcefa,0x52527ba4,0xdddd3ea1,0x5e5e71bc,0x13139726,0xa6a6f557,0xb9b96869,0x00000000,0xc1c12c99,0x40406080,0xe3e31fdd,0x7979c8f2,0xb6b6ed77,0xd4d4beb3,0x8d8d4601,0x6767d9ce,0x72724be4,0x9494de33,0x9898d42b,0xb0b0e87b,0x85854a11,0xbbbb6b6d,0xc5c52a91,0x4f4fe59e,0xeded16c1,0x8686c517,0x9a9ad72f,0x666655cc,0x11119422,0x8a8acf0f,0xe9e910c9,0x04040608,0xfefe81e7,0xa0a0f05b,0x787844f0,0x2525ba4a,0x4b4be396,0xa2a2f35f,0x5d5dfeba,0x8080c01b,0x05058a0a,0x3f3fad7e,0x2121bc42,0x707048e0,0xf1f104f9,0x6363dfc6,0x7777c1ee,0xafaf7545,0x42426384,0x20203040,0xe5e51ad1,0xfdfd0ee1,0xbfbf6d65,0x81814c19,0x18181430,0x2626354c,0xc3c32f9d,0xbebee167,0x3535a26a,0x8888cc0b,0x2e2e395c,0x9393573d,0x5555f2aa,0xfcfc82e3,0x7a7a47f4,0xc8c8ac8b,0xbabae76f,0x32322b64,0xe6e695d7,0xc0c0a09b,0x19199832,0x9e9ed127,0xa3a37f5d,0x44446688,0x54547ea8,0x3b3bab76,0x0b0b8316,0x8c8cca03,0xc7c72995,0x6b6bd3d6,0x28283c50,0xa7a77955,0xbcbce263,0x16161d2c,0xadad7641,0xdbdb3bad,0x646456c8,0x74744ee8,0x14141e28,0x9292db3f,0x0c0c0a18,0x48486c90,0xb8b8e46b,0x9f9f5d25,0xbdbd6e61,0x4343ef86,0xc4c4a693,0x3939a872,0x3131a462,0xd3d337bd,0xf2f28bff,0xd5d532b1,0x8b8b430d,0x6e6e59dc,0xdadab7af,0x01018c02,0xb1b16479,0x9c9cd223,0x4949e092,0xd8d8b4ab,0xacacfa43,0xf3f307fd,0xcfcf2585,0xcacaaf8f,0xf4f48ef3,0x4747e98e,0x10101820,0x6f6fd5de,0xf0f088fb,0x4a4a6f94,0x5c5c72b8,0x38382470,0x5757f1ae,0x7373c7e6,0x97975135,0xcbcb238d,0xa1a17c59,0xe8e89ccb,0x3e3e217c,0x9696dd37,0x6161dcc2,0x0d0d861a,0x0f0f851e,0xe0e090db,0x7c7c42f8,0x7171c4e2,0xccccaa83,0x9090d83b,0x0606050c,0xf7f701f5,0x1c1c1238,0xc2c2a39f,0x6a6a5fd4,0xaeaef947,0x6969d0d2,0x1717912e,0x99995829,0x3a3a2774,0x2727b94e,0xd9d938a9,0xebeb13cd,0x2b2bb356,0x22223344,0xd2d2bbbf,0xa9a97049,0x0707890e,0x3333a766,0x2d2db65a,0x3c3c2278,0x1515922a,0xc9c92089,0x87874915,0xaaaaff4f,0x505078a0,0xa5a57a51,0x03038f06,0x5959f8b2,0x09098012,0x1a1a1734,0x6565daca,0xd7d731b5,0x8484c613,0xd0d0b8bb,0x8282c31f,0x2929b052,0x5a5a77b4,0x1e1e113c,0x7b7bcbf6,0xa8a8fc4b,0x6d6dd6da,0x2c2c3a58,
      0xc6a597f4,0xf884eb97,0xee99c7b0,0xf68df78c,0xff0de517,0xd6bdb7dc,0xdeb1a7c8,0x915439fc,0x6050c0f0,0x02030405,0xcea987e0,0x567dac87,0xe719d52b,0xb56271a6,0x4de69a31,0xec9ac3b5,0x8f4505cf,0x1f9d3ebc,0x894009c0,0xfa87ef92,0xef15c53f,0xb2eb7f26,0x8ec90740,0xfb0bed1d,0x41ec822f,0xb3677da9,0x5ffdbe1c,0x45ea8a25,0x23bf46da,0x53f7a602,0xe496d3a1,0x9b5b2ded,0x75c2ea5d,0xe11cd924,0x3dae7ae9,0x4c6a98be,0x6c5ad8ee,0x7e41fcc3,0xf502f106,0x834f1dd1,0x685cd0e4,0x51f4a207,0xd134b95c,0xf908e918,0xe293dfae,0xab734d95,0x6253c4f5,0x2a3f5441,0x080c1014,0x955231f6,0x46658caf,0x9d5e21e2,0x30286078,0x37a16ef8,0x0a0f1411,0x2fb55ec4,0x0e091c1b,0x2436485a,0x1b9b36b6,0xdf3da547,0xcd26816a,0x4e699cbb,0x7fcdfe4c,0xea9fcfba,0x121b242d,0x1d9e3ab9,0x5874b09c,0x342e6872,0x362d6c77,0xdcb2a3cd,0xb4ee7329,0x5bfbb616,0xa4f65301,0x764decd7,0xb76175a3,0x7dcefa49,0x527ba48d,0xdd3ea142,0x5e71bc93,0x139726a2,0xa6f55704,0xb96869b8,0x00000000,0xc12c9974,0x406080a0,0xe31fdd21,0x79c8f243,0xb6ed772c,0xd4beb3d9,0x8d4601ca,0x67d9ce70,0x724be4dd,0x94de3379,0x98d42b67,0xb0e87b23,0x854a11de,0xbb6b6dbd,0xc52a917e,0x4fe59e34,0xed16c13a,0x86c51754,0x9ad72f62,0x6655ccff,0x119422a7,0x8acf0f4a,0xe910c930,0x0406080a,0xfe81e798,0xa0f05b0b,0x7844f0cc,0x25ba4ad5,0x4be3963e,0xa2f35f0e,0x5dfeba19,0x80c01b5b,0x058a0a85,0x3fad7eec,0x21bc42df,0x7048e0d8,0xf104f90c,0x63dfc67a,0x77c1ee58,0xaf75459f,0x426384a5,0x20304050,0xe51ad12e,0xfd0ee112,0xbf6d65b7,0x814c19d4,0x1814303c,0x26354c5f,0xc32f9d71,0xbee16738,0x35a26afd,0x88cc0b4f,0x2e395c4b,0x93573df9,0x55f2aa0d,0xfc82e39d,0x7a47f4c9,0xc8ac8bef,0xbae76f32,0x322b647d,0xe695d7a4,0xc0a09bfb,0x199832b3,0x9ed12768,0xa37f5d81,0x446688aa,0x547ea882,0x3bab76e6,0x0b83169e,0x8cca0345,0xc729957b,0x6bd3d66e,0x283c5044,0xa779558b,0xbce2633d,0x161d2c27,0xad76419a,0xdb3bad4d,0x6456c8fa,0x744ee8d2,0x141e2822,0x92db3f76,0x0c0a181e,0x486c90b4,0xb8e46b37,0x9f5d25e7,0xbd6e61b2,0x43ef862a,0xc4a693f1,0x39a872e3,0x31a462f7,0xd337bd59,0xf28bff86,0xd532b156,0x8b430dc5,0x6e59dceb,0xdab7afc2,0x018c028f,0xb16479ac,0x9cd2236d,0x49e0923b,0xd8b4abc7,0xacfa4315,0xf307fd09,0xcf25856f,0xcaaf8fea,0xf48ef389,0x47e98e20,0x10182028,0x6fd5de64,0xf088fb83,0x4a6f94b1,0x5c72b896,0x3824706c,0x57f1ae08,0x73c7e652,0x975135f3,0xcb238d65,0xa17c5984,0xe89ccbbf,0x3e217c63,0x96dd377c,0x61dcc27f,0x0d861a91,0x0f851e94,0xe090dbab,0x7c42f8c6,0x71c4e257,0xccaa83e5,0x90d83b73,0x06050c0f,0xf701f503,0x1c123836,0xc2a39ffe,0x6a5fd4e1,0xaef94710,0x69d0d26b,0x17912ea8,0x995829e8,0x3a277469,0x27b94ed0,0xd938a948,0xeb13cd35,0x2bb356ce,0x22334455,0xd2bbbfd6,0xa9704990,0x07890e80,0x33a766f2,0x2db65ac1,0x3c227866,0x15922aad,0xc9208960,0x874915db,0xaaff4f1a,0x5078a088,0xa57a518e,0x038f068a,0x59f8b213,0x0980129b,0x1a173439,0x65daca75,0xd731b553,0x84c61351,0xd0b8bbd3,0x82c31f5e,0x29b052cb,0x5a77b499,0x1e113c33,0x7bcbf646,0xa8fc4b1f,0x6dd6da61,0x2c3a584e,
      0xa597f4a5,0x84eb9784,0x99c7b099,0x8df78c8d,0x0de5170d,0xbdb7dcbd,0xb1a7c8b1,0x5439fc54,0x50c0f050,0x03040503,0xa987e0a9,0x7dac877d,0x19d52b19,0x6271a662,0xe69a31e6,0x9ac3b59a,0x4505cf45,0x9d3ebc9d,0x4009c040,0x87ef9287,0x15c53f15,0xeb7f26eb,0xc90740c9,0x0bed1d0b,0xec822fec,0x677da967,0xfdbe1cfd,0xea8a25ea,0xbf46dabf,0xf7a602f7,0x96d3a196,0x5b2ded5b,0xc2ea5dc2,0x1cd9241c,0xae7ae9ae,0x6a98be6a,0x5ad8ee5a,0x41fcc341,0x02f10602,0x4f1dd14f,0x5cd0e45c,0xf4a207f4,0x34b95c34,0x08e91808,0x93dfae93,0x734d9573,0x53c4f553,0x3f54413f,0x0c10140c,0x5231f652,0x658caf65,0x5e21e25e,0x28607828,0xa16ef8a1,0x0f14110f,0xb55ec4b5,0x091c1b09,0x36485a36,0x9b36b69b,0x3da5473d,0x26816a26,0x699cbb69,0xcdfe4ccd,0x9fcfba9f,0x1b242d1b,0x9e3ab99e,0x74b09c74,0x2e68722e,0x2d6c772d,0xb2a3cdb2,0xee7329ee,0xfbb616fb,0xf65301f6,0x4decd74d,0x6175a361,0xcefa49ce,0x7ba48d7b,0x3ea1423e,0x71bc9371,0x9726a297,0xf55704f5,0x6869b868,0x00000000,0x2c99742c,0x6080a060,0x1fdd211f,0xc8f243c8,0xed772ced,0xbeb3d9be,0x4601ca46,0xd9ce70d9,0x4be4dd4b,0xde3379de,0xd42b67d4,0xe87b23e8,0x4a11de4a,0x6b6dbd6b,0x2a917e2a,0xe59e34e5,0x16c13a16,0xc51754c5,0xd72f62d7,0x55ccff55,0x9422a794,0xcf0f4acf,0x10c93010,0x06080a06,0x81e79881,0xf05b0bf0,0x44f0cc44,0xba4ad5ba,0xe3963ee3,0xf35f0ef3,0xfeba19fe,0xc01b5bc0,0x8a0a858a,0xad7eecad,0xbc42dfbc,0x48e0d848,0x04f90c04,0xdfc67adf,0xc1ee58c1,0x75459f75,0x6384a563,0x30405030,0x1ad12e1a,0x0ee1120e,0x6d65b76d,0x4c19d44c,0x14303c14,0x354c5f35,0x2f9d712f,0xe16738e1,0xa26afda2,0xcc0b4fcc,0x395c4b39,0x573df957,0xf2aa0df2,0x82e39d82,0x47f4c947,0xac8befac,0xe76f32e7,0x2b647d2b,0x95d7a495,0xa09bfba0,0x9832b398,0xd12768d1,0x7f5d817f,0x6688aa66,0x7ea8827e,0xab76e6ab,0x83169e83,0xca0345ca,0x29957b29,0xd3d66ed3,0x3c50443c,0x79558b79,0xe2633de2,0x1d2c271d,0x76419a76,0x3bad4d3b,0x56c8fa56,0x4ee8d24e,0x1e28221e,0xdb3f76db,0x0a181e0a,0x6c90b46c,0xe46b37e4,0x5d25e75d,0x6e61b26e,0xef862aef,0xa693f1a6,0xa872e3a8,0xa462f7a4,0x37bd5937,0x8bff868b,0x32b15632,0x430dc543,0x59dceb59,0xb7afc2b7,0x8c028f8c,0x6479ac64,0xd2236dd2,0xe0923be0,0xb4abc7b4,0xfa4315fa,0x07fd0907,0x25856f25,0xaf8feaaf,0x8ef3898e,0xe98e20e9,0x18202818,0xd5de64d5,0x88fb8388,0x6f94b16f,0x72b89672,0x24706c24,0xf1ae08f1,0xc7e652c7,0x5135f351,0x238d6523,0x7c59847c,0x9ccbbf9c,0x217c6321,0xdd377cdd,0xdcc27fdc,0x861a9186,0x851e9485,0x90dbab90,0x42f8c642,0xc4e257c4,0xaa83e5aa,0xd83b73d8,0x050c0f05,0x01f50301,0x12383612,0xa39ffea3,0x5fd4e15f,0xf94710f9,0xd0d26bd0,0x912ea891,0x5829e858,0x27746927,0xb94ed0b9,0x38a94838,0x13cd3513,0xb356ceb3,0x33445533,0xbbbfd6bb,0x70499070,0x890e8089,0xa766f2a7,0xb65ac1b6,0x22786622,0x922aad92,0x20896020,0x4915db49,0xff4f1aff,0x78a08878,0x7a518e7a,0x8f068a8f,0xf8b213f8,0x80129b80,0x17343917,0xdaca75da,0x31b55331,0xc61351c6,0xb8bbd3b8,0xc31f5ec3,0xb052cbb0,0x77b49977,0x113c3311,0xcbf646cb,0xfc4b1ffc,0xd6da61d6,0x3a584e3a,
      0x97f4a5f4,0xeb978497,0xc7b099b0,0xf78c8d8c,0xe5170d17,0xb7dcbddc,0xa7c8b1c8,0x39fc54fc,0xc0f050f0,0x04050305,0x87e0a9e0,0xac877d87,0xd52b192b,0x71a662a6,0x9a31e631,0xc3b59ab5,0x05cf45cf,0x3ebc9dbc,0x09c040c0,0xef928792,0xc53f153f,0x7f26eb26,0x0740c940,0xed1d0b1d,0x822fec2f,0x7da967a9,0xbe1cfd1c,0x8a25ea25,0x46dabfda,0xa602f702,0xd3a196a1,0x2ded5bed,0xea5dc25d,0xd9241c24,0x7ae9aee9,0x98be6abe,0xd8ee5aee,0xfcc341c3,0xf1060206,0x1dd14fd1,0xd0e45ce4,0xa207f407,0xb95c345c,0xe9180818,0xdfae93ae,0x4d957395,0xc4f553f5,0x54413f41,0x10140c14,0x31f652f6,0x8caf65af,0x21e25ee2,0x60782878,0x6ef8a1f8,0x14110f11,0x5ec4b5c4,0x1c1b091b,0x485a365a,0x36b69bb6,0xa5473d47,0x816a266a,0x9cbb69bb,0xfe4ccd4c,0xcfba9fba,0x242d1b2d,0x3ab99eb9,0xb09c749c,0x68722e72,0x6c772d77,0xa3cdb2cd,0x7329ee29,0xb616fb16,0x5301f601,0xecd74dd7,0x75a361a3,0xfa49ce49,0xa48d7b8d,0xa1423e42,0xbc937193,0x26a297a2,0x5704f504,0x69b868b8,0x00000000,0x99742c74,0x80a060a0,0xdd211f21,0xf243c843,0x772ced2c,0xb3d9bed9,0x01ca46ca,0xce70d970,0xe4dd4bdd,0x3379de79,0x2b67d467,0x7b23e823,0x11de4ade,0x6dbd6bbd,0x917e2a7e,0x9e34e534,0xc13a163a,0x1754c554,0x2f62d762,0xccff55ff,0x22a794a7,0x0f4acf4a,0xc9301030,0x080a060a,0xe7988198,0x5b0bf00b,0xf0cc44cc,0x4ad5bad5,0x963ee33e,0x5f0ef30e,0xba19fe19,0x1b5bc05b,0x0a858a85,0x7eecadec,0x42dfbcdf,0xe0d848d8,0xf90c040c,0xc67adf7a,0xee58c158,0x459f759f,0x84a563a5,0x40503050,0xd12e1a2e,0xe1120e12,0x65b76db7,0x19d44cd4,0x303c143c,0x4c5f355f,0x9d712f71,0x6738e138,0x6afda2fd,0x0b4fcc4f,0x5c4b394b,0x3df957f9,0xaa0df20d,0xe39d829d,0xf4c947c9,0x8befacef,0x6f32e732,0x647d2b7d,0xd7a495a4,0x9bfba0fb,0x32b398b3,0x2768d168,0x5d817f81,0x88aa66aa,0xa8827e82,0x76e6abe6,0x169e839e,0x0345ca45,0x957b297b,0xd66ed36e,0x50443c44,0x558b798b,0x633de23d,0x2c271d27,0x419a769a,0xad4d3b4d,0xc8fa56fa,0xe8d24ed2,0x28221e22,0x3f76db76,0x181e0a1e,0x90b46cb4,0x6b37e437,0x25e75de7,0x61b26eb2,0x862aef2a,0x93f1a6f1,0x72e3a8e3,0x62f7a4f7,0xbd593759,0xff868b86,0xb1563256,0x0dc543c5,0xdceb59eb,0xafc2b7c2,0x028f8c8f,0x79ac64ac,0x236dd26d,0x923be03b,0xabc7b4c7,0x4315fa15,0xfd090709,0x856f256f,0x8feaafea,0xf3898e89,0x8e20e920,0x20281828,0xde64d564,0xfb838883,0x94b16fb1,0xb8967296,0x706c246c,0xae08f108,0xe652c752,0x35f351f3,0x8d652365,0x59847c84,0xcbbf9cbf,0x7c632163,0x377cdd7c,0xc27fdc7f,0x1a918691,0x1e948594,0xdbab90ab,0xf8c642c6,0xe257c457,0x83e5aae5,0x3b73d873,0x0c0f050f,0xf5030103,0x38361236,0x9ffea3fe,0xd4e15fe1,0x4710f910,0xd26bd06b,0x2ea891a8,0x29e858e8,0x74692769,0x4ed0b9d0,0xa9483848,0xcd351335,0x56ceb3ce,0x44553355,0xbfd6bbd6,0x49907090,0x0e808980,0x66f2a7f2,0x5ac1b6c1,0x78662266,0x2aad92ad,0x89602060,0x15db49db,0x4f1aff1a,0xa0887888,0x518e7a8e,0x068a8f8a,0xb213f813,0x129b809b,0x34391739,0xca75da75,0xb5533153,0x1351c651,0xbbd3b8d3,0x1f5ec35e,0x52cbb0cb,0xb4997799,0x3c331133,0xf646cb46,0x4b1ffc1f,0xda61d661,0x584e3a4e,
      0xf4a5f432,0x9784976f,0xb099b05e,0x8c8d8c7a,0x170d17e8,0xdcbddc0a,0xc8b1c816,0xfc54fc6d,0xf050f090,0x05030507,0xe0a9e02e,0x877d87d1,0x2b192bcc,0xa662a613,0x31e6317c,0xb59ab559,0xcf45cf40,0xbc9dbca3,0xc040c049,0x92879268,0x3f153fd0,0x26eb2694,0x40c940ce,0x1d0b1de6,0x2fec2f6e,0xa967a91a,0x1cfd1c43,0x25ea2560,0xdabfdaf9,0x02f70251,0xa196a145,0xed5bed76,0x5dc25d28,0x241c24c5,0xe9aee9d4,0xbe6abef2,0xee5aee82,0xc341c3bd,0x060206f3,0xd14fd152,0xe45ce48c,0x07f40756,0x5c345c8d,0x180818e1,0xae93ae4c,0x9573953e,0xf553f597,0x413f416b,0x140c141c,0xf652f663,0xaf65afe9,0xe25ee27f,0x78287848,0xf8a1f8cf,0x110f111b,0xc4b5c4eb,0x1b091b15,0x5a365a7e,0xb69bb6ad,0x473d4798,0x6a266aa7,0xbb69bbf5,0x4ccd4c33,0xba9fba50,0x2d1b2d3f,0xb99eb9a4,0x9c749cc4,0x722e7246,0x772d7741,0xcdb2cd11,0x29ee299d,0x16fb164d,0x01f601a5,0xd74dd7a1,0xa361a314,0x49ce4934,0x8d7b8ddf,0x423e429f,0x937193cd,0xa297a2b1,0x04f504a2,0xb868b801,0x00000000,0x742c74b5,0xa060a0e0,0x211f21c2,0x43c8433a,0x2ced2c9a,0xd9bed90d,0xca46ca47,0x70d97017,0xdd4bddaf,0x79de79ed,0x67d467ff,0x23e82393,0xde4ade5b,0xbd6bbd06,0x7e2a7ebb,0x34e5347b,0x3a163ad7,0x54c554d2,0x62d762f8,0xff55ff99,0xa794a7b6,0x4acf4ac0,0x301030d9,0x0a060a0e,0x98819866,0x0bf00bab,0xcc44ccb4,0xd5bad5f0,0x3ee33e75,0x0ef30eac,0x19fe1944,0x5bc05bdb,0x858a8580,0xecadecd3,0xdfbcdffe,0xd848d8a8,0x0c040cfd,0x7adf7a19,0x58c1582f,0x9f759f30,0xa563a5e7,0x50305070,0x2e1a2ecb,0x120e12ef,0xb76db708,0xd44cd455,0x3c143c24,0x5f355f79,0x712f71b2,0x38e13886,0xfda2fdc8,0x4fcc4fc7,0x4b394b65,0xf957f96a,0x0df20d58,0x9d829d61,0xc947c9b3,0xefacef27,0x32e73288,0x7d2b7d4f,0xa495a442,0xfba0fb3b,0xb398b3aa,0x68d168f6,0x817f8122,0xaa66aaee,0x827e82d6,0xe6abe6dd,0x9e839e95,0x45ca45c9,0x7b297bbc,0x6ed36e05,0x443c446c,0x8b798b2c,0x3de23d81,0x271d2731,0x9a769a37,0x4d3b4d96,0xfa56fa9e,0xd24ed2a6,0x221e2236,0x76db76e4,0x1e0a1e12,0xb46cb4fc,0x37e4378f,0xe75de778,0xb26eb20f,0x2aef2a69,0xf1a6f135,0xe3a8e3da,0xf7a4f7c6,0x5937598a,0x868b8674,0x56325683,0xc543c54e,0xeb59eb85,0xc2b7c218,0x8f8c8f8e,0xac64ac1d,0x6dd26df1,0x3be03b72,0xc7b4c71f,0x15fa15b9,0x090709fa,0x6f256fa0,0xeaafea20,0x898e897d,0x20e92067,0x28182838,0x64d5640b,0x83888373,0xb16fb1fb,0x967296ca,0x6c246c54,0x08f1085f,0x52c75221,0xf351f364,0x652365ae,0x847c8425,0xbf9cbf57,0x6321635d,0x7cdd7cea,0x7fdc7f1e,0x9186919c,0x9485949b,0xab90ab4b,0xc642c6ba,0x57c45726,0xe5aae529,0x73d873e3,0x0f050f09,0x030103f4,0x3612362a,0xfea3fe3c,0xe15fe18b,0x10f910be,0x6bd06b02,0xa891a8bf,0xe858e871,0x69276953,0xd0b9d0f7,0x48384891,0x351335de,0xceb3cee5,0x55335577,0xd6bbd604,0x90709039,0x80898087,0xf2a7f2c1,0xc1b6c1ec,0x6622665a,0xad92adb8,0x602060a9,0xdb49db5c,0x1aff1ab0,0x887888d8,0x8e7a8e2b,0x8a8f8a89,0x13f8134a,0x9b809b92,0x39173923,0x75da7510,0x53315384,0x51c651d5,0xd3b8d303,0x5ec35edc,0xcbb0cbe2,0x997799c3,0x3311332d,0x46cb463d,0x1ffc1fb7,0x61d6610c,0x4e3a4e62]
blakeS=[[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],[14,10,4,8,9,15,13,6,1,12,0,2,11,7,5,3],[11,8,12,0,5,2,15,13,10,14,3,6,7,1,9,4],[7,9,3,1,13,12,11,14,2,6,5,10,4,0,15,8],[9,0,5,7,2,4,10,15,14,1,11,12,6,8,3,13],[2,12,6,10,0,11,8,3,4,13,7,5,15,14,1,9],[12,5,1,15,14,13,4,10,0,7,6,3,9,2,8,11],[13,11,7,14,12,1,3,9,5,0,15,4,8,6,2,10],[6,15,14,9,11,3,0,8,12,2,13,7,1,4,10,5],[10,2,8,4,7,6,1,5,15,11,9,14,3,12,13,0],[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],[14,10,4,8,9,15,13,6,1,12,0,2,11,7,5,3],[11,8,12,0,5,2,15,13,10,14,3,6,7,1,9,4],[7,9,3,1,13,12,11,14,2,6,5,10,4,0,15,8],[9,0,5,7,2,4,10,15,14,1,11,12,6,8,3,13],[2,12,6,10,0,11,8,3,4,13,7,5,15,14,1,9],[12,5,1,15,14,13,4,10,0,7,6,3,9,2,8,11],[13,11,7,14,12,1,3,9,5,0,15,4,8,6,2,10],[6,15,14,9,11,3,0,8,12,2,13,7,1,4,10,5],[10,2,8,4,7,6,1,5,15,11,9,14,3,12,13,0]]

if __name__ == '__main__':
    run_tests()
